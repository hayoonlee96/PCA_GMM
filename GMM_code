## GMM codes (based on scikit learn gmm library)
## Reference : https://jakevdp.github.io/PythonDataScienceHandbook/05.12-gaussian-mixtures.html

from sklearn.mixture import GaussianMixture as GMM
from matplotlib.patches import Ellipse

def draw_ellipse(position, covariance, ax=None, **kwargs):
    ax = ax or plt.gca()    
    if covariance.shape == (2, 2):
        U, s, Vt = np.linalg.svd(covariance) # SVD 사용 for PCA
        angle = np.degrees(np.arctan2(U[1, 0], U[0, 0]))
        width, height = 2 * np.sqrt(s)
    else:
        angle = 0
        width, height = 2 * np.sqrt(covariance)
    
    # Draw the Ellipse
    for nsig in range(1, 4):
        ax.add_patch(Ellipse(position, nsig * width, nsig * height, angle, **kwargs))
        
def plot_gmm(gmm, X, label=True, ax=None):
    ax = ax or plt.gca()
    labels = gmm.fit(X).predict(X)
    if label:
        ax.scatter(X[:, 0], X[:, 1], c=labels, s=40, cmap='viridis', zorder=2)
    else:
        ax.scatter(X[:, 0], X[:, 1], s=40, zorder=2)
    ax.axis('equal')
    w_factor = 0.2 / gmm.weights_.max()
    #for pos, covar, w in zip(gmm.means_, gmm.covars_, gmm.weights_):
    for pos, covar, w in zip(gmm.means_, gmm.covariances_, gmm.weights_):
        draw_ellipse(pos, covar, alpha=w * w_factor)
        print(pos, covar)
    #return labels
    
def get_gmm_vals(gmm, X, data_dimension, number_of_gaussian, label=True, ax=None):
    pos_full = np.zeros((number_of_gaussian,data_dimension))
    covar_full = np.zeros((number_of_gaussian,data_dimension,data_dimension))

    labels = gmm.fit(X).predict(X)
    w_factor = 0.2 / gmm.weights_.max()
    #for pos, covar, w in zip(gmm.means_, gmm.covars_, gmm.weights_):
    i = 0
    for pos, covar, w in zip(gmm.means_, gmm.covariances_, gmm.weights_):
        pos_full[i,:] = pos
        covar_full[i,:,:] = covar
        i = i+1
    return pos_full, covar_full

def get_gmm_labels(gmm, X, data_dimension, number_of_gaussian, label=True, ax=None):
    pos_full = np.zeros((number_of_gaussian,data_dimension))
    covar_full = np.zeros((number_of_gaussian,data_dimension,data_dimension))

    labels = gmm.fit(X).predict(X)
    return labels
